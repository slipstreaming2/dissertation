language ESSENCE' 1.0

$ size of the board
letting width = 10
letting height = 10
letting maxShipL = 4


letting ROWS be domain int(1..width)
letting COLS be domain int(1..height)
letting XROWS be domain int(0..width+1)
letting XCOLS be domain int(0..height+1)
letting PIECES be domain int(1..7)

$ 0 is empty, placeholder
letting w be 1 $ water
letting c be 2 $ circle (submarine)
letting l be 3 $ left of ship
letting r be 4 $ right of ship
letting t be 5 $ top of ship
letting b be 6 $ bottom of ship
letting m be 7 $ middle of ship

$ sizes of the ships, and indexes
letting submarine be 1
letting destroyer be 2
letting cruiser be 3
letting battleship be 4

given hint : matrix indexed by [ROWS, COLS] of int(0..7)
given rowSum : matrix indexed by [ROWS] of int(0..10)
given colSum : matrix indexed by [COLS] of int(0..10)
given shipsNum : matrix indexed by [int(1..4)] of int(1..4)

find board : matrix indexed by [XROWS, XCOLS] of PIECES
find boardPieces : matrix indexed by [XROWS, XCOLS] of bool
find numPieces : matrix indexed by [PIECES] of int(0..width*height)
$ find stupid : matrix indexed by [int(1..4)] of int(1..1000)

such that 

$ respect initial hints given
forAll row : ROWS . 
    forAll col : COLS . 
        hint[row,col] != 0 -> board[row,col] = hint[row,col],

$ set all outer rows to water
forAll xrow : XROWS .
    board[xrow, 0] = w /\ board[xrow, width+1] = w,

$ set all outer columns to water
forAll col : COLS .
    board[0, col] = w /\ board[height+1, col] = w,

$ board pieces matches board, why not enforce 0?
forAll row : XROWS . 
    forAll col : XCOLS . 
        board[row,col] != w = boardPieces[row,col],



$ summation of rows match row sum given
forAll row : ROWS .
    sum(boardPieces[row, ..]) = rowSum[row],

$ summation of columns match column sum given
forAll col : COLS . 
    sum(boardPieces[.., col]) = colSum[col],

$ diagonal and adjacency constraint
forAll row : ROWS .
    forAll col : COLS . 
        $ diagonal constraint
        $ built from top down, so do not need to check water in diagonals
        (board[row, col] = w \/ board[row+1,col+1] = w)
        /\ (board[row,col] = w \/ board[row+1, col-1] = w)
        $ adjacency
        /\ ((board[row,col] in toSet([c,l,r,t])) -> board[row-1,col] = w)
        /\ ((board[row,col] in toSet([c,l,r,b])) -> board[row+1,col] = w)
        /\ ((board[row,col] in toSet([c,t,b,l])) -> board[row,col-1] = w)
        /\ ((board[row,col] in toSet([c,t,b,r])) -> board[row,col+1] = w),


$ number of pieces (top, bottom, left...) match
forAll piece : PIECES . 
    numPieces[piece] = sum([board[row, col] = piece | row : ROWS, col : COLS]),

$ $ number of pieces match
numPieces[c] = shipsNum[submarine],
numPieces[l] = numPieces[r], $ could remove?
numPieces[t] = numPieces[b], $ could remove?
$ no of ends
numPieces[t] + numPieces[l] = shipsNum[destroyer] + shipsNum[cruiser] + shipsNum[battleship],
$ no of middles
numPieces[m] = shipsNum[cruiser] + shipsNum[battleship]*2,

forAll s : int(destroyer .. maxShipL) .
    shipsNum[s] = sum([
        ((col+s-1 <= width) /\
            (board[row,col] = l /\ board[row,col+s-1] = r
            /\ 
            (s != 2 -> 
            forAll i : int(col+1 .. col+s-2) .
                board[row,i] = m
            )
        ))
        \/ 
        ((s+row-1 <= height) /\ 
            (board[row,col] = t /\ board[s+row-1,col] = b
            /\ 
            (s != 2 -> 
            forAll j : int(row+1 .. row+s-2) . 
                board[j, col] = m
            )
        )) 
        | row : ROWS, col : COLS
    ]),

$ ship shapes
forAll row : ROWS . 
    forAll col : COLS .
        (board[row, col] = l -> 
            (board[row,col+1] = m \/
            board[row,col+1] = r))
        /\
        (board[row, col] = r -> 
            (board[row, col-1] = m \/
            board[row, col-1] = l))
        /\
        (board[row, col] = t -> 
            (board[row+1, col] = b \/
            board[row+1, col] = m))
        /\     
        (board[row, col] = b -> 
            (board[row-1, col] = t \/
            board[row-1, col] = m))
        /\ 
        (board[row,col] = m -> 
            (boardPieces[row-1, col] = boardPieces[row+1, col] /\
            boardPieces[row, col+1] = boardPieces[row, col-1] /\
            boardPieces[row-1, col] + boardPieces[row, col-1] = 1)) $ battleship cannot be like a cross