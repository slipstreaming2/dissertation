language ESSENCE' 1.0

given numZones : int(1..)
given numNurses : int(1..)
given minNumPatientsPerNurse : int(1..)
given maxNumPatientsPerNurse : int(1..)
given maxWorkloadPerNurse : int(1..)
given zonePatientAcuity : matrix indexed by [int(1..numZones), int(1..10)] of int(0..)
given numZonePatients : matrix indexed by [int(1..numZones)] of int(1..)

letting zoneLength be max(numZonePatients)

$ what zone the nurse is working in
find nurseZoneAssign : matrix indexed by [int(1..numNurses), int(1..numZones)] of int(0..1)

$ what patient number the nurse is working on
$ note patients with acuity zero cannot be attended to by a nurse
find nursePatientAssign : matrix indexed by [int(1..numNurses), int(1..zoneLength)] of int(0..1)
$ find nursePatientAssign : matrix indexed by [int(1..numNurses), int(minNumPatientsPerNurse..maxNumPatientsPerNurse)] of int(0..zoneLength)

such that 

$ nurses only work in one zone
forAll nurse : int(1..numNurses) .
    sum(nurseZoneAssign[nurse, ..]) = 1,


$ forAll nurse : int(1..numNurses) .
$     sum([nurseZoneAssign[nurse,zone]*nursePatientAssign[nurse, patient] | zone : int(1..numZones), patient : int(1..zoneLength)]) <= maxNumPatientsPerNurse
$     /\
$     sum([nurseZoneAssign[nurse,zone]*nursePatientAssign[nurse, patient] | zone : int(1..numZones), patient : int(1..zoneLength)]) >= minNumPatientsPerNurse
$     /\
$     sum([nurseZoneAssign[nurse,zone]*nursePatientAssign[nurse, patient]*zonePatientAcuity[zone,patient] | zone : int(1..numZones), patient : int(1..zoneLength)]) <= maxWorkloadPerNurse,
$     $ sum([nurseZoneAssign[nurse,zone]*nursePatientAssign[nurse, patient]*zonePatientAcuity[zone,patient] | zone : int(1..numZones), patient : int(1..zoneLength)]) = supposedWorkload[nurse],

forAll nurse : int(1..numNurses) .
    forAll zone : int(1..numZones) .
        $ nurse working in that zone
        nurseZoneAssign[nurse, zone] != 0 -> (
            $ working with less than max patients
            $ (sum(nursePatientAssign[nurse, ..]) <= maxNumPatientsPerNurse)
            $ /\
            $ (sum(nursePatientAssign[nurse, ..]) >= minNumPatientsPerNurse) 
            $ /\
            sum([zonePatientAcuity[zone,i] * nursePatientAssign[nurse,i] | i : int(1..zoneLength)]) <= maxWorkloadPerNurse
        ),


forAll zone : int(1..numZones) .
    forAll patient : int(1..zoneLength) .
        $ zonePatientAcuity[zone,patient] != 0 ->
        $     exists j : int(1..numNurses) .
        $         nurseZoneAssign[j,zone]+nursePatientAssign[j,patient] > 1
        $ /\
        $ a nurse cannot look after a non-existent patient
        zonePatientAcuity[zone,patient] = 0 -> 
            forAll nurse : int(1..numNurses) .
                nurseZoneAssign[nurse,zone] = 1 ->
                    nursePatientAssign[nurse,patient] = 0,


$ forAll nurse : int(1..numNurses) .
$     forAll patient : int(1..zoneLength) .
        
$         nursePatientAssign[nurse,patient] != 0 ->
$             forAll zone : int(1..numZones) .

$ $ each patient must have at least min num of nurses, less than max num
$ forAll patient : int(1..zoneLength) .
$     forAll zone : int(1..numZones) .
$         zonePatientAcuity[zone,patient] != 0 ->
$             (sum([nursePatientAssign[nurse,patient]*nurseZoneAssign[nurse,zone] | nurse : int(1..numNurses)]) = 1) 

$ each patient must have at least min num of nurses, less than max num
forAll patient : int(1..zoneLength) .
    forAll zone : int(1..numZones) .
        zonePatientAcuity[zone,patient] != 0 ->
            (sum([nursePatientAssign[nurse,patient]*nurseZoneAssign[nurse,zone] | nurse : int(1..numNurses)]) >= minNumPatientsPerNurse) 
            /\
            (sum([nursePatientAssign[nurse,patient]*nurseZoneAssign[nurse,zone] | nurse : int(1..numNurses)]) <= maxNumPatientsPerNurse),

$ symmetry breaking
forAll nurse : int(1..numNurses-1) .
    nursePatientAssign[nurse, ..] <=lex nursePatientAssign[nurse+1, ..]
