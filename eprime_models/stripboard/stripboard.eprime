language ESSENCE' 1.0;

$ board configuration
given max_w : int(1..);
given max_h : int(1..);
given max_links : int(1..);

$ circuit config
given COMPONENT : int(1..);
given PIN : int(1..);
given NET : int (1..);

letting ORIENTATION be domain int(1..4);
letting LINKS be domain int(1..max_links);

$ size of components
find footprint_w : matrix indexed by [COMPONENT] of int(1..max_w);
find footprint_h : matrix indexed by [COMPONENT] of int(1..max_h);
find allowed_orientation : matrix indexed by ORIENTATION;

$ placement of component pins (offset from component origin)
find pin_dx : matrix indexed by [PIN] of int(1..max_w);
find pin_dy : matrix indexed by [PIN] of int(1..max_h);

$ which net each pin needs to be assigned to
find pin_net : matrix indexed by [PIN] of NET;

$ which pins belong to each component
find pins : matrix indexed by [COMPONENT] of PIN;

$ jumper links between rows
find link_x : matrix indexed by [LINKS] of int(1..full_w);
find link_y : matrix indexed by [LINKS] of int(-1..max_h);
find link_length : matrix indexed by [LINKS] of int(1..max_h);

$ component placement
find component_x : matrix indexed by [COMPONENT] of int(1..max_w);
find component_y : matrix indexed by [COMPONENT] of int(1..max_h);
find component_orientation : matrix indexed by [COMPONENT] of ORIENTATION;

$ electrical connection path


such that 

allDiff(allowed_orientation);
allDiff(pins);



