language ESSENCE' 1.0

given numZones : int(1..)
given numNurses : int(1..)
given minNumPatientsPerNurse : int(1..)
given maxNumPatientsPerNurse : int(1..)
given maxWorkloadPerNurse : int(1..)
given zonePatientAcuity : matrix indexed by [int(1..numZones), int(1..16)] of int(0..)
given numZonePatients : matrix indexed by [int(1..numZones)] of int(1..)

letting zoneLength be max(numZonePatients)

find nurseZoneAssign : matrix indexed by [int(1..numNurses)] of int(1..numZones)
find nursePatientAssign : matrix indexed by [int(1..numNurses), int(minNumPatientsPerNurse..maxNumPatientsPerNurse)] of int(0..zoneLength)

$ zero is no nurse
$ find nursePatientAssign : matrix indexed by [int(1..numZones), int(1.. zoneLength)] of int(0..numNurses)

such that 

$ forAll nurse : int(1..numNurses) .
$     sum(nursePatientAssign[nurse]) > 0,

$ forAll nurse : int(1..numNurses) .
$     forAll patient : int(minNumPatientsPerNurse .. maxNumPatientsPerNurse) .
$         nursePatientAssign[nurse, patient] in toSet(zonePatientAcuity)

$ a patient must be assigned to a nurse
$ forAll zone : int(1..numZones) .
$     forAll i : int(1..zoneLength) .
$         zonePatientAcuity[zone, i] != 0 -> nursePatientAssign[zone, i] != 0
$         /\
$         zonePatientAcuity[zone,i] = 0 -> nursePatientAssign[zone,i] = 0,

$ forAll zone : int(1..numZones) .
$     forAll nurse : int(1..numNurses) .
$         nurseZoneAssign[nurse] = zone -> (
$             $ nurses do not have more patients than max
$             $ sum([nurse = nursePatientAssign[zone, i] | i : int(1..zoneLength)]) <= maxNumPatientsPerNurse
$             $ /\
$             $ nurses do not have less patients than min
$             $ sum([nurse = nursePatientAssign[zone, i] | i : int(1..zoneLength)]) >= minNumPatientsPerNurse
$             $ /\
$             $ nurses do not take on more workload than max
$             sum([zonePatientAcuity[zone, i] * (nurse=nursePatientAssign[zone,i])| i : int(1..zoneLength)]) <= maxWorkloadPerNurse
$             $ /\ 
$             $ $ nurses work in one zone only
$             $ forAll i : int(1..numZones) .
$             $     i != zone -> sum([nurse=nursePatientAssign[i,j] | j : int(1..zoneLength)]) = 0
$             $     $ 
$             $     $ nurse in toSet(nursePatientAssign) !(nurse in toSet(nursePatientAssign[i, ..]))
$         )



$ a patient must be assigned to a nurse
$ forAll zone : int(1..numZones) .
$     forAll i : int(1..zoneLength) .
$         (zonePatientAcuity[zone, i] != 0 -> 
$             sum([nursePatientAssign[nurse, j] = i | nurse : int(1..numNurses), j : int(minNumPatientsPerNurse..maxNumPatientsPerNurse)]) > 0)
$         /\
$         (zonePatientAcuity[zone,i] = 0 -> 
$             sum([nursePatientAssign[nurse, j] = i | nurse : int(1..numNurses), j : int(minNumPatientsPerNurse..maxNumPatientsPerNurse)]) = 0),

forAll nurse : int(1..numNurses) .
    $ nurses do not have more patients than max
    sum([nurse = nursePatientAssign[nurseZoneAssign[nurse], i] | i : int(1..zoneLength)]) <= maxNumPatientsPerNurse
    /\
    $ nurses do not have less patients than min
    sum([nurse = nursePatientAssign[nurseZoneAssign[nurse], i] | i : int(1..zoneLength)]) >= minNumPatientsPerNurse
    /\
    $ nurses do not take on more workload than max
    sum([zonePatientAcuity[nurseZoneAssign[nurse], i]* nurse=nursePatientAssign[nurseZoneAssign[nurse],i]| i : int(1..zoneLength)]) <= maxWorkloadPerNurse
    $ /\ 
    $ $ nurses work in one zone only
    $ forAll i : int(1..numZones) .
    $     i != nurseZoneAssign[nurse] /\ sum([nurse=nursePatientAssign[i,j] | j : int(1..zoneLength)]) = 0
        $ nurse in toSet(nursePatientAssign) !(nurse in toSet(nursePatientAssign[i, ..]))

$ forAll i : int(1..zoneLength) .
$     forAll nurse : int(1..numNurses) .
$         sum([])



